plugins {
  id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: 'java'
apply plugin: 'maven'
apply from : "gradle/sonatype.gradle"

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group = "de.notizwerk"
version = "1.0.0"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

// NetBeans stuff
if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "org.jboss.weld.se:weld-se-core:2.4.0.Final"
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

jar {    
    exclude (["de/notizwerk/weldcdi/examples/","**/*logging.properties"])
    manifest {
        attributes 'Weld-Verticle-Factory-Version': version
    }  
}

// only for packaging the examples as runnable jar and test them on the console
shadowJar {
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'de.notizwerk.weldcdi.examples.Bootstrap'
    } 
}

// utility
task resolveSources << {
    def componentIds = configurations.compile.incoming.resolutionResult.allDependencies.collect { it.selected.id }

    def result = dependencies.createArtifactResolutionQuery()
        .forComponents(componentIds)
        .withArtifacts(JvmLibrary, SourcesArtifact, JavadocArtifact)
        .execute()

    for (component in result.resolvedComponents) {
        component.getArtifacts(SourcesArtifact).each { println "Source artifact for ${component.id}: ${it.file}" }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}
